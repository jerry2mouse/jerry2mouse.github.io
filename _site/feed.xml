<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-06-28T21:45:56+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">jerry2mx的Blog</title><subtitle>编程，Lua，C++，基本当C用，高级的特性不会，STL都没怎么用过。</subtitle><entry><title type="html">博客搭建</title><link href="http://localhost:4000/jekyll/update/2023/06/28/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html" rel="alternate" type="text/html" title="博客搭建" /><published>2023-06-28T10:52:23+08:00</published><updated>2023-06-28T10:52:23+08:00</updated><id>http://localhost:4000/jekyll/update/2023/06/28/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/06/28/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html"><![CDATA[<p>准备搭建一个博客，放在GitHub Pages上，用github page官方介绍的jekyll来生成。</p>

<p>环境搭建:
因为jekyll在Ubuntu上安装使用容易些，所以装了一个Ubuntu桌面虚拟机。</p>

<p>在虚拟机内安装vsftpd用于传输文件，博客的生成和预览在虚拟机内完成。
为此经历和学习了：</p>
<ul>
  <li>下载Ubuntu，安装</li>
  <li>新建Linux用户，设置密码</li>
  <li>安装vsftpd，vi修改配置文件，学了几个vi命令，i插入，dd删除行，e编辑</li>
  <li>sudo命令</li>
  <li>chmod</li>
  <li>chown</li>
  <li>ip addr show 查看ip</li>
  <li>sudo apt install openssh-server – 安装之后可以使用sftp连接，如果不安装，则不能加密连接</li>
  <li>cp 拷贝文件</li>
</ul>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[准备搭建一个博客，放在GitHub Pages上，用github page官方介绍的jekyll来生成。]]></summary></entry><entry><title type="html">了解协程</title><link href="http://localhost:4000/jekyll/update/2023/06/28/%E5%8D%8F%E7%A8%8B.html" rel="alternate" type="text/html" title="了解协程" /><published>2023-06-28T10:52:23+08:00</published><updated>2023-06-28T10:52:23+08:00</updated><id>http://localhost:4000/jekyll/update/2023/06/28/%E5%8D%8F%E7%A8%8B</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/06/28/%E5%8D%8F%E7%A8%8B.html"><![CDATA[<p>在使用lua时知道了协程这个概念，coroutine，co-routine，协作的例程。</p>

<p>最近看云风的一篇文章<a href="https://blog.codingnow.com/2012/07/c_coroutine.html">C 的 coroutine 库</a>，想了解一下协程，网上看了一些介绍，其中酷壳的<a href="https://coolshell.cn/articles/10975.html">一个“蝇量级” C 语言协程库</a>关于C实现协程为什么困难讲的清楚：</p>

<blockquote>
  <p>当今一些具备协程语义的语言，比较重量级的如C#、erlang、golang，以及轻量级的python、lua、javascript、ruby，还有函数式的scala、scheme等。相比之下，作为原生态语言的 C 反而处于尴尬的地位，原因在于 C 依赖于一种叫做栈帧的例程调用，例程内部的状态量和返回值都保留在堆栈上，这意味着生产者和消费者相互之间无法实现平级调用，当然你可以改写成把生产者作为主例程然后将产品作为传递参数调用消费者例程，这样的代码写起来费力不讨好而且看起来会很难受，特别当协程数目达到十万数量级，这种写法就过于僵化了。
是用汇编保存和恢复寄存器信息。</p>
</blockquote>

<p>高阶的语言在C的基础上进行了抽象和封装，隐藏了栈帧的问题，实现了对协程的支持。</p>

<p>顺便看了下汇编的指令。
汇编call指令和ret指令:
When executing a near call, the processor does the following (see Figure 6-2):</p>
<ol>
  <li>Pushes the current value of the EIP register on the stack.</li>
  <li>Loads the offset of the called procedure in the EIP register.</li>
  <li>Begins execution of the called procedure.
When executing a near return, the processor performs these actions:</li>
  <li>Pops the top-of-stack value (the return instruction pointer) into the EIP register.</li>
  <li>If the RET instruction has an optional n argument, increments the stack pointer by the number of bytes
specified with the n operand to release parameters from the stack.</li>
  <li>Resumes execution of the calling procedure.</li>
</ol>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[在使用lua时知道了协程这个概念，coroutine，co-routine，协作的例程。]]></summary></entry></feed>